{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Preparo do ambiente"
      ],
      "metadata": {
        "id": "-Dp45vikrpEi"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XIOmhXNIrlj5",
        "outputId": "3fc4b9a8-f949-4024-d22e-ed6cf4b82f59"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%bash\n",
        "mkdir dados\n",
        "mkdir dados/annovar\n",
        "mkdir out logs"
      ],
      "metadata": {
        "id": "2RedcprJrs9O"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Sudo = permissao de root\n",
        "%%bash\n",
        "sudo apt install tree \\\n",
        "1>logs/log_instalacao.txt \\\n",
        "2>logs/erros_instalacao.txt"
      ],
      "metadata": {
        "id": "GkYQ9Vz3rs6b"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Conferir se diretório foi criado\n",
        "%%bash\n",
        "ls"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KkaoibBXrs3d",
        "outputId": "0c7d7574-97b5-48f8-c2e8-12c61b019e90"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "dados\n",
            "drive\n",
            "logs\n",
            "out\n",
            "sample_data\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Arquivo TXT para Annovar"
      ],
      "metadata": {
        "id": "K6m5yF6Vr_AP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Abrindo o arquivo de variantes:\n",
        "variants_file = \"https://drive.google.com/file/d/1EpmhLIrpDBVOf5w2bSgMoLGqmYhUDfgQ/view?usp=sharing\"\n",
        "\n",
        "# Criando uma lista para receber as variantes no formato de input do Annovar:\n",
        "variants_avinput_formatted = []\n",
        "\n",
        "# Conversão do formato das variantes em txt para o formato do Annovar:\n",
        "with open(variants_file) as file:\n",
        "  for line in file:\n",
        "    if '#' in line:\n",
        "      continue\n",
        "    line_splitted = line.split('\\t')\n",
        "    chrom = line_splitted[0]\n",
        "    pos_i = line_splitted[1]\n",
        "    id = line_splitted[2]\n",
        "    ref = line_splitted[3]\n",
        "    alt = line_splitted[4].replace('\\n', '')\n",
        "\n",
        "    # Para saber qual a posição final da alteração, olhamos se a quantidade de\n",
        "    # nucleotídeos de referência e alternativos são iguais, caso sejam\n",
        "    # se trata de uma substituição e, portanto a posição inicial é igual a final.\n",
        "    if len(ref) == len(alt):\n",
        "      pos_f = pos_i\n",
        "\n",
        "    # Caso se trate de uma inserção, a quantidade de nucleotídeos na posição final,\n",
        "    # deve ser maior que a quantidade de nucleotídeos na posição inicial:\n",
        "    elif len(ref) < len(alt):\n",
        "      pos_f = int(pos_i) + int(len(alt) - len(ref))\n",
        "\n",
        "    # Caso se trate de uma deleção, a quantidade de nucleotídeos na posição final,\n",
        "    # deve ser menor que a quantidade de nucleotídeos na posição inicial:\n",
        "    elif len(ref) > len(alt):\n",
        "      pos_f = int(pos_i) - int(len(ref) - len(alt))\n",
        "\n",
        "    # Colocando os elementos ordenados em uma lista:\n",
        "    avinput_formatted = [chrom, pos_i, str(pos_f), ref, alt, '\\n']\n",
        "    # Transformando os elementos da lista em uma string única separada\n",
        "    # por tabulações, e, adicionando à lista criada fora do loop para receber\n",
        "    # cada linha do arquivo agora reformatado:\n",
        "    variants_avinput_formatted.append('\\t'.join(avinput_formatted))\n",
        "\n",
        "# Exportando a lista das variantes para um arquivo de formato: .avinput\n",
        "# avinput format: Chromosome, Start, End, Reference Allelel, Alternative Allele\n",
        "with open('/content/Variantes_germinativas_variants.txt' , 'w') as output_file:\n",
        "  for var_formatted in variants_avinput_formatted:\n",
        "    output_file.write(var_formatted)"
      ],
      "metadata": {
        "id": "2N20F_Z8rs0I"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Conferir dados do arquivo gerado acima\n",
        "%%bash\n",
        "head /content/Variantes_germinativas_variants.txt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fMT8-4BZrsxN",
        "outputId": "1a7dce26-6244-4efc-e883-8b9e0590098c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "chr1\t94049574\t94049574\tC\tA\t\n",
            "chr10\t114910883\t114910883\tG\tA\t\n",
            "chr12\t116418553\t116418554\tA\tAC\t\n",
            "chr9\t14150143\t14150143\tC\tT\t\n",
            "chr11\t66254814\t66254814\tG\tA\t\n",
            "chr10\t114901076\t114901076\tG\tA\t\n",
            "chr14\t93286182\t93286182\tG\tC\t\n",
            "chr18\t44603833\t44603833\tG\tC\t\n",
            "chr2\t32168370\t32168370\tC\tT\t\n",
            "chr10\t68535201\t68535201\tC\tA\t\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Anotação das Variantes"
      ],
      "metadata": {
        "id": "qzfu9wfnsRJT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%bash\n",
        "wget https://github.com/Varstation/POS-BIOINFO/raw/master/annovar/annovar.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W9DG8OH3sUtG",
        "outputId": "fd2cbd37-1984-43e0-dc82-9f08a0fa0403"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "--2022-11-04 22:10:43--  https://github.com/Varstation/POS-BIOINFO/raw/master/annovar/annovar.zip\n",
            "Resolving github.com (github.com)... 140.82.113.3\n",
            "Connecting to github.com (github.com)|140.82.113.3|:443... connected.\n",
            "HTTP request sent, awaiting response... 302 Found\n",
            "Location: https://raw.githubusercontent.com/Varstation/POS-BIOINFO/master/annovar/annovar.zip [following]\n",
            "--2022-11-04 22:10:44--  https://raw.githubusercontent.com/Varstation/POS-BIOINFO/master/annovar/annovar.zip\n",
            "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.108.133, 185.199.109.133, 185.199.110.133, ...\n",
            "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.108.133|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 5281524 (5.0M) [application/zip]\n",
            "Saving to: ‘annovar.zip’\n",
            "\n",
            "     0K .......... .......... .......... .......... ..........  0% 9.17M 1s\n",
            "    50K .......... .......... .......... .......... ..........  1% 8.04M 1s\n",
            "   100K .......... .......... .......... .......... ..........  2% 48.1M 0s\n",
            "   150K .......... .......... .......... .......... ..........  3% 43.4M 0s\n",
            "   200K .......... .......... .......... .......... ..........  4% 13.9M 0s\n",
            "   250K .......... .......... .......... .......... ..........  5% 44.3M 0s\n",
            "   300K .......... .......... .......... .......... ..........  6%  110M 0s\n",
            "   350K .......... .......... .......... .......... ..........  7% 65.4M 0s\n",
            "   400K .......... .......... .......... .......... ..........  8%  202M 0s\n",
            "   450K .......... .......... .......... .......... ..........  9% 15.7M 0s\n",
            "   500K .......... .......... .......... .......... .......... 10%  140M 0s\n",
            "   550K .......... .......... .......... .......... .......... 11% 44.6M 0s\n",
            "   600K .......... .......... .......... .......... .......... 12%  191M 0s\n",
            "   650K .......... .......... .......... .......... .......... 13%  162M 0s\n",
            "   700K .......... .......... .......... .......... .......... 14%  158M 0s\n",
            "   750K .......... .......... .......... .......... .......... 15%  160M 0s\n",
            "   800K .......... .......... .......... .......... .......... 16% 99.0M 0s\n",
            "   850K .......... .......... .......... .......... .......... 17%  139M 0s\n",
            "   900K .......... .......... .......... .......... .......... 18%  178M 0s\n",
            "   950K .......... .......... .......... .......... .......... 19% 25.6M 0s\n",
            "  1000K .......... .......... .......... .......... .......... 20%  119M 0s\n",
            "  1050K .......... .......... .......... .......... .......... 21%  143M 0s\n",
            "  1100K .......... .......... .......... .......... .......... 22%  163M 0s\n",
            "  1150K .......... .......... .......... .......... .......... 23%  212M 0s\n",
            "  1200K .......... .......... .......... .......... .......... 24%  176M 0s\n",
            "  1250K .......... .......... .......... .......... .......... 25%  117M 0s\n",
            "  1300K .......... .......... .......... .......... .......... 26%  160M 0s\n",
            "  1350K .......... .......... .......... .......... .......... 27%  170M 0s\n",
            "  1400K .......... .......... .......... .......... .......... 28% 87.8M 0s\n",
            "  1450K .......... .......... .......... .......... .......... 29%  132M 0s\n",
            "  1500K .......... .......... .......... .......... .......... 30%  123M 0s\n",
            "  1550K .......... .......... .......... .......... .......... 31%  180M 0s\n",
            "  1600K .......... .......... .......... .......... .......... 31%  205M 0s\n",
            "  1650K .......... .......... .......... .......... .......... 32%  211M 0s\n",
            "  1700K .......... .......... .......... .......... .......... 33%  191M 0s\n",
            "  1750K .......... .......... .......... .......... .......... 34%  167M 0s\n",
            "  1800K .......... .......... .......... .......... .......... 35%  200M 0s\n",
            "  1850K .......... .......... .......... .......... .......... 36%  198M 0s\n",
            "  1900K .......... .......... .......... .......... .......... 37%  120M 0s\n",
            "  1950K .......... .......... .......... .......... .......... 38%  120M 0s\n",
            "  2000K .......... .......... .......... .......... .......... 39%  135M 0s\n",
            "  2050K .......... .......... .......... .......... .......... 40%  145M 0s\n",
            "  2100K .......... .......... .......... .......... .......... 41%  166M 0s\n",
            "  2150K .......... .......... .......... .......... .......... 42%  127M 0s\n",
            "  2200K .......... .......... .......... .......... .......... 43%  114M 0s\n",
            "  2250K .......... .......... .......... .......... .......... 44%  141M 0s\n",
            "  2300K .......... .......... .......... .......... .......... 45%  109M 0s\n",
            "  2350K .......... .......... .......... .......... .......... 46%  122M 0s\n",
            "  2400K .......... .......... .......... .......... .......... 47%  112M 0s\n",
            "  2450K .......... .......... .......... .......... .......... 48%  123M 0s\n",
            "  2500K .......... .......... .......... .......... .......... 49%  161M 0s\n",
            "  2550K .......... .......... .......... .......... .......... 50%  203M 0s\n",
            "  2600K .......... .......... .......... .......... .......... 51%  196M 0s\n",
            "  2650K .......... .......... .......... .......... .......... 52%  207M 0s\n",
            "  2700K .......... .......... .......... .......... .......... 53%  130M 0s\n",
            "  2750K .......... .......... .......... .......... .......... 54%  124M 0s\n",
            "  2800K .......... .......... .......... .......... .......... 55%  112M 0s\n",
            "  2850K .......... .......... .......... .......... .......... 56%  139M 0s\n",
            "  2900K .......... .......... .......... .......... .......... 57%  106M 0s\n",
            "  2950K .......... .......... .......... .......... .......... 58%  177M 0s\n",
            "  3000K .......... .......... .......... .......... .......... 59%  125M 0s\n",
            "  3050K .......... .......... .......... .......... .......... 60%  199M 0s\n",
            "  3100K .......... .......... .......... .......... .......... 61%  209M 0s\n",
            "  3150K .......... .......... .......... .......... .......... 62%  189M 0s\n",
            "  3200K .......... .......... .......... .......... .......... 63%  178M 0s\n",
            "  3250K .......... .......... .......... .......... .......... 63%  206M 0s\n",
            "  3300K .......... .......... .......... .......... .......... 64%  203M 0s\n",
            "  3350K .......... .......... .......... .......... .......... 65%  194M 0s\n",
            "  3400K .......... .......... .......... .......... .......... 66%  168M 0s\n",
            "  3450K .......... .......... .......... .......... .......... 67%  211M 0s\n",
            "  3500K .......... .......... .......... .......... .......... 68%  203M 0s\n",
            "  3550K .......... .......... .......... .......... .......... 69%  196M 0s\n",
            "  3600K .......... .......... .......... .......... .......... 70%  193M 0s\n",
            "  3650K .......... .......... .......... .......... .......... 71%  205M 0s\n",
            "  3700K .......... .......... .......... .......... .......... 72%  174M 0s\n",
            "  3750K .......... .......... .......... .......... .......... 73%  189M 0s\n",
            "  3800K .......... .......... .......... .......... .......... 74%  195M 0s\n",
            "  3850K .......... .......... .......... .......... .......... 75%  119M 0s\n",
            "  3900K .......... .......... .......... .......... .......... 76%  191M 0s\n",
            "  3950K .......... .......... .......... .......... .......... 77%  146M 0s\n",
            "  4000K .......... .......... .......... .......... .......... 78%  174M 0s\n",
            "  4050K .......... .......... .......... .......... .......... 79%  198M 0s\n",
            "  4100K .......... .......... .......... .......... .......... 80%  179M 0s\n",
            "  4150K .......... .......... .......... .......... .......... 81%  197M 0s\n",
            "  4200K .......... .......... .......... .......... .......... 82%  171M 0s\n",
            "  4250K .......... .......... .......... .......... .......... 83%  198M 0s\n",
            "  4300K .......... .......... .......... .......... .......... 84%  195M 0s\n",
            "  4350K .......... .......... .......... .......... .......... 85%  132M 0s\n",
            "  4400K .......... .......... .......... .......... .......... 86%  175M 0s\n",
            "  4450K .......... .......... .......... .......... .......... 87%  193M 0s\n",
            "  4500K .......... .......... .......... .......... .......... 88%  190M 0s\n",
            "  4550K .......... .......... .......... .......... .......... 89%  192M 0s\n",
            "  4600K .......... .......... .......... .......... .......... 90%  176M 0s\n",
            "  4650K .......... .......... .......... .......... .......... 91%  163M 0s\n",
            "  4700K .......... .......... .......... .......... .......... 92%  191M 0s\n",
            "  4750K .......... .......... .......... .......... .......... 93%  183M 0s\n",
            "  4800K .......... .......... .......... .......... .......... 94%  168M 0s\n",
            "  4850K .......... .......... .......... .......... .......... 95%  195M 0s\n",
            "  4900K .......... .......... .......... .......... .......... 95%  195M 0s\n",
            "  4950K .......... .......... .......... .......... .......... 96%  197M 0s\n",
            "  5000K .......... .......... .......... .......... .......... 97%  175M 0s\n",
            "  5050K .......... .......... .......... .......... .......... 98%  198M 0s\n",
            "  5100K .......... .......... .......... .......... .......... 99%  172M 0s\n",
            "  5150K .......                                               100%  209M=0.05s\n",
            "\n",
            "2022-11-04 22:10:44 (93.9 MB/s) - ‘annovar.zip’ saved [5281524/5281524]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%bash\n",
        "unzip annovar.zip\n",
        "rm -r annovar.zip"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R0pikuH_sVgX",
        "outputId": "88e8bd0e-ea79-4fa9-f811-d53a899b9f3d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Archive:  annovar.zip\n",
            "   creating: annovar/\n",
            "  inflating: __MACOSX/._annovar      \n",
            "  inflating: annovar/coding_change.pl  \n",
            "  inflating: annovar/variants_reduction.pl  \n",
            "  inflating: annovar/retrieve_seq_from_fasta.pl  \n",
            "  inflating: annovar/annotate_variation.pl  \n",
            "   creating: annovar/example/\n",
            "  inflating: annovar/convert2annovar.pl  \n",
            "  inflating: annovar/table_annovar.pl  \n",
            "   creating: annovar/humandb/\n",
            "  inflating: annovar/example/gene_xref.txt  \n",
            "  inflating: annovar/example/grantham.matrix  \n",
            "  inflating: annovar/example/example.tab_region  \n",
            "  inflating: annovar/example/gene_fullxref.txt  \n",
            "  inflating: annovar/example/ex2.vcf  \n",
            "  inflating: annovar/example/README  \n",
            "  inflating: annovar/example/ex1.avinput  \n",
            "  inflating: annovar/example/snplist.txt  \n",
            "  inflating: annovar/example/example.simple_region  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Download das bases de dados do Annovar para o gene de referência (hg19)"
      ],
      "metadata": {
        "id": "qI4Galu9sdd2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#hg19 - refGene\n",
        "%%bash\n",
        "perl annovar/annotate_variation.pl -buildver hg19 \\\n",
        "-downdb -webfrom annovar refGene annovar/humandb/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Hc20uJilsVc-",
        "outputId": "db714366-ecc0-45eb-b189-81c285294d74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "NOTICE: Web-based checking to see whether ANNOVAR new version is available ... Done\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_refGene.txt.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_refGeneMrna.fa.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_refGeneVersion.txt.gz ... OK\n",
            "NOTICE: Uncompressing downloaded files\n",
            "NOTICE: Finished downloading annotation files for hg19 build version, with files saved at the 'annovar/humandb' directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#hg19 - exac03\n",
        "%%bash\n",
        "perl annovar/annotate_variation.pl -buildver hg19 \\\n",
        "-downdb -webfrom annovar exac03 annovar/humandb/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Qs8dp8atsVaE",
        "outputId": "43fabca2-df40-44ac-b91f-f59b370d2dea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "NOTICE: Web-based checking to see whether ANNOVAR new version is available ... Done\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_exac03.txt.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_exac03.txt.idx.gz ... OK\n",
            "NOTICE: Uncompressing downloaded files\n",
            "NOTICE: Finished downloading annotation files for hg19 build version, with files saved at the 'annovar/humandb' directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#hg19 - avsnp147\n",
        "%%bash\n",
        "perl annovar/annotate_variation.pl -buildver hg19 \\\n",
        "-downdb -webfrom annovar avsnp147 annovar/humandb/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wcieEu1DsVXQ",
        "outputId": "943df7e3-3de4-4b23-cdcd-1096db60f141"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "NOTICE: Web-based checking to see whether ANNOVAR new version is available ... Done\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_avsnp147.txt.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_avsnp147.txt.idx.gz ... OK\n",
            "NOTICE: Uncompressing downloaded files\n",
            "NOTICE: Finished downloading annotation files for hg19 build version, with files saved at the 'annovar/humandb' directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#hg19 - dbnsfp30a\n",
        "%%bash\n",
        "perl annovar/annotate_variation.pl -buildver hg19 \\\n",
        "-downdb -webfrom annovar dbnsfp30a annovar/humandb/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oSItuOw3sVTU",
        "outputId": "3cf4a3fc-697f-411a-e1e9-4948575d20e3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "NOTICE: Web-based checking to see whether ANNOVAR new version is available ... Done\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_dbnsfp30a.txt.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_dbnsfp30a.txt.idx.gz ... OK\n",
            "NOTICE: Uncompressing downloaded files\n",
            "NOTICE: Finished downloading annotation files for hg19 build version, with files saved at the 'annovar/humandb' directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#hg19 - clinvar_20210123\n",
        "%%bash\n",
        "perl annovar/annotate_variation.pl -buildver hg19 \\\n",
        "-downdb -webfrom annovar clinvar_20210123 annovar/humandb/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sTTveoWLsVQf",
        "outputId": "26ab8c21-9b76-475d-f761-9f07b8d1ae38"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "NOTICE: Web-based checking to see whether ANNOVAR new version is available ... Done\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_clinvar_20210123.txt.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_clinvar_20210123.txt.idx.gz ... OK\n",
            "NOTICE: Uncompressing downloaded files\n",
            "NOTICE: Finished downloading annotation files for hg19 build version, with files saved at the 'annovar/humandb' directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#hg19 - gnomad211_exome\n",
        "%%bash\n",
        "perl annovar/annotate_variation.pl -buildver hg19 \\\n",
        "-downdb gnomad211_exome -webfrom annovar annovar/humandb/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vrvJN57LsVMI",
        "outputId": "3609a5b3-6ea4-4e42-b96c-87effbcb7073"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "NOTICE: Web-based checking to see whether ANNOVAR new version is available ... Done\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_gnomad211_exome.txt.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_gnomad211_exome.txt.idx.gz ... OK\n",
            "NOTICE: Uncompressing downloaded files\n",
            "NOTICE: Finished downloading annotation files for hg19 build version, with files saved at the 'annovar/humandb' directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#hg19 - Abraom\n",
        "%%bash\n",
        "perl annovar/annotate_variation.pl -buildver hg19 \\\n",
        "-downdb -webfrom annovar abraom annovar/humandb/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3iMXU-YwsVH9",
        "outputId": "02216ae1-0a7a-4bc4-dcbc-6acb116112f4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "NOTICE: Web-based checking to see whether ANNOVAR new version is available ... Done\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_abraom.txt.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_abraom.txt.idx.gz ... OK\n",
            "NOTICE: Uncompressing downloaded files\n",
            "NOTICE: Finished downloading annotation files for hg19 build version, with files saved at the 'annovar/humandb' directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#hg19 - Intervar_20180118\n",
        "%%bash\n",
        "perl annovar/annotate_variation.pl -buildver hg19 \\\n",
        "-downdb -webfrom annovar intervar_20180118 annovar/humandb/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8Nz84IAMsVDS",
        "outputId": "72ad10fd-e620-4219-e4d8-0a2100e625fc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "NOTICE: Web-based checking to see whether ANNOVAR new version is available ... Done\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_intervar_20180118.txt.gz ... OK\n",
            "NOTICE: Downloading annotation database http://www.openbioinformatics.org/annovar/download/hg19_intervar_20180118.txt.idx.gz ... OK\n",
            "NOTICE: Uncompressing downloaded files\n",
            "NOTICE: Finished downloading annotation files for hg19 build version, with files saved at the 'annovar/humandb' directory\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%bash\n",
        "# -protocols: bancos de dados usados\n",
        "# -remove: remove arquivos temporarios\n",
        "# -buildver: versao do build\n",
        "# -operations: operacoes em cada banco (g: gene-based, f: filter-based, r: region-based)\n",
        "# nastring: string para representar valores ausentes\n",
        "perl annovar/table_annovar.pl \\\n",
        "/content/Variantes_germinativas_variants.txt \\\n",
        "annovar/humandb/ \\\n",
        "--dot2underline \\\n",
        "-buildver hg19 \\\n",
        "-out dados/annovar/Variantes_germinativas_variants \\\n",
        "-remove \\\n",
        "-protocol refGene,abraom,avsnp147,exac03,dbnsfp30a,clinvar_20210123,gnomad211_exome,intervar_20180118, \\\n",
        "-operation g,f,f,f,f,f,f,f \\\n",
        "-nastring \".\" \\\n",
        "-polish"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vKIcjHKjsyhD",
        "outputId": "67a9d740-a891-456f-968c-20527db10591"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "-----------------------------------------------------------------\n",
            "NOTICE: Processing operation=g protocol=refGene\n",
            "\n",
            "NOTICE: Running with system command <annotate_variation.pl -geneanno -buildver hg19 -dbtype refGene -outfile dados/annovar/Variantes_germinativas_variants.refGene -exonsort -nofirstcodondel /content/Variantes_germinativas_variants.txt annovar/humandb/>\n",
            "NOTICE: Output files are written to dados/annovar/Variantes_germinativas_variants.refGene.variant_function, dados/annovar/Variantes_germinativas_variants.refGene.exonic_variant_function\n",
            "NOTICE: Reading gene annotation from annovar/humandb/hg19_refGene.txt ... Done with 78239 transcripts (including 18578 without coding sequence annotation) for 28293 unique genes\n",
            "NOTICE: Processing next batch with 14352 unique variants in 14352 input lines\n",
            "NOTICE: Reading FASTA sequences from annovar/humandb/hg19_refGeneMrna.fa ... Done with 19572 sequences\n",
            "WARNING: A total of 465 sequences will be ignored due to lack of correct ORF annotation\n",
            "NOTICE: Variants with invalid input format are written to dados/annovar/Variantes_germinativas_variants.refGene.invalid_input\n",
            "\n",
            "NOTICE: Running with system command <coding_change.pl  dados/annovar/Variantes_germinativas_variants.refGene.exonic_variant_function.orig annovar/humandb//hg19_refGene.txt annovar/humandb//hg19_refGeneMrna.fa -alltranscript -out dados/annovar/Variantes_germinativas_variants.refGene.fa -newevf dados/annovar/Variantes_germinativas_variants.refGene.exonic_variant_function>\n",
            "-----------------------------------------------------------------\n",
            "NOTICE: Processing operation=f protocol=abraom\n",
            "NOTICE: Finished reading 3 column headers for '-dbtype abraom'\n",
            "\n",
            "NOTICE: Running system command <annotate_variation.pl -filter -dbtype abraom -buildver hg19 -outfile dados/annovar/Variantes_germinativas_variants /content/Variantes_germinativas_variants.txt annovar/humandb/ -otherinfo>\n",
            "NOTICE: the --dbtype abraom is assumed to be in generic ANNOVAR database format\n",
            "NOTICE: Output file with variants matching filtering criteria is written to dados/annovar/Variantes_germinativas_variants.hg19_abraom_dropped, and output file with other variants is written to dados/annovar/Variantes_germinativas_variants.hg19_abraom_filtered\n",
            "NOTICE: Processing next batch with 14212 unique variants in 15789 input lines\n",
            "NOTICE: Database index loaded. Total number of bins is 1202560 and the number of bins to be scanned is 9524\n",
            "NOTICE: Scanning filter database annovar/humandb/hg19_abraom.txt...Done\n",
            "NOTICE: Variants with invalid input format are written to dados/annovar/Variantes_germinativas_variants.invalid_input\n",
            "-----------------------------------------------------------------\n",
            "NOTICE: Processing operation=f protocol=avsnp147\n",
            "\n",
            "NOTICE: Running system command <annotate_variation.pl -filter -dbtype avsnp147 -buildver hg19 -outfile dados/annovar/Variantes_germinativas_variants /content/Variantes_germinativas_variants.txt annovar/humandb/>\n",
            "NOTICE: Output file with variants matching filtering criteria is written to dados/annovar/Variantes_germinativas_variants.hg19_avsnp147_dropped, and output file with other variants is written to dados/annovar/Variantes_germinativas_variants.hg19_avsnp147_filtered\n",
            "NOTICE: Processing next batch with 14212 unique variants in 15789 input lines\n",
            "NOTICE: Database index loaded. Total number of bins is 27868332 and the number of bins to be scanned is 13788\n",
            "NOTICE: Scanning filter database annovar/humandb/hg19_avsnp147.txt...Done\n",
            "NOTICE: Variants with invalid input format are written to dados/annovar/Variantes_germinativas_variants.invalid_input\n",
            "-----------------------------------------------------------------\n",
            "NOTICE: Processing operation=f protocol=exac03\n",
            "NOTICE: Finished reading 8 column headers for '-dbtype exac03'\n",
            "\n",
            "NOTICE: Running system command <annotate_variation.pl -filter -dbtype exac03 -buildver hg19 -outfile dados/annovar/Variantes_germinativas_variants /content/Variantes_germinativas_variants.txt annovar/humandb/ -otherinfo>\n",
            "NOTICE: Output file with variants matching filtering criteria is written to dados/annovar/Variantes_germinativas_variants.hg19_exac03_dropped, and output file with other variants is written to dados/annovar/Variantes_germinativas_variants.hg19_exac03_filtered\n",
            "NOTICE: Processing next batch with 14212 unique variants in 15789 input lines\n",
            "NOTICE: Database index loaded. Total number of bins is 749886 and the number of bins to be scanned is 13758\n",
            "NOTICE: Scanning filter database annovar/humandb/hg19_exac03.txt...Done\n",
            "NOTICE: Variants with invalid input format are written to dados/annovar/Variantes_germinativas_variants.invalid_input\n",
            "-----------------------------------------------------------------\n",
            "NOTICE: Processing operation=f protocol=dbnsfp30a\n",
            "NOTICE: Finished reading 34 column headers for '-dbtype dbnsfp30a'\n",
            "\n",
            "NOTICE: Running system command <annotate_variation.pl -filter -dbtype dbnsfp30a -buildver hg19 -outfile dados/annovar/Variantes_germinativas_variants /content/Variantes_germinativas_variants.txt annovar/humandb/ -otherinfo>\n",
            "NOTICE: Output file with variants matching filtering criteria is written to dados/annovar/Variantes_germinativas_variants.hg19_dbnsfp30a_dropped, and output file with other variants is written to dados/annovar/Variantes_germinativas_variants.hg19_dbnsfp30a_filtered\n",
            "NOTICE: Processing next batch with 14212 unique variants in 15789 input lines\n",
            "NOTICE: Database index loaded. Total number of bins is 548895 and the number of bins to be scanned is 12324\n",
            "NOTICE: Scanning filter database annovar/humandb/hg19_dbnsfp30a.txt...Done\n",
            "NOTICE: Variants with invalid input format are written to dados/annovar/Variantes_germinativas_variants.invalid_input\n",
            "-----------------------------------------------------------------\n",
            "NOTICE: Processing operation=f protocol=clinvar_20210123\n",
            "NOTICE: Finished reading 5 column headers for '-dbtype clinvar_20210123'\n",
            "\n",
            "NOTICE: Running system command <annotate_variation.pl -filter -dbtype clinvar_20210123 -buildver hg19 -outfile dados/annovar/Variantes_germinativas_variants /content/Variantes_germinativas_variants.txt annovar/humandb/ -otherinfo>\n",
            "NOTICE: the --dbtype clinvar_20210123 is assumed to be in generic ANNOVAR database format\n",
            "NOTICE: Output file with variants matching filtering criteria is written to dados/annovar/Variantes_germinativas_variants.hg19_clinvar_20210123_dropped, and output file with other variants is written to dados/annovar/Variantes_germinativas_variants.hg19_clinvar_20210123_filtered\n",
            "NOTICE: Processing next batch with 14212 unique variants in 15789 input lines\n",
            "NOTICE: Database index loaded. Total number of bins is 74968 and the number of bins to be scanned is 5814\n",
            "NOTICE: Scanning filter database annovar/humandb/hg19_clinvar_20210123.txt...Done\n",
            "NOTICE: Variants with invalid input format are written to dados/annovar/Variantes_germinativas_variants.invalid_input\n",
            "-----------------------------------------------------------------\n",
            "NOTICE: Processing operation=f protocol=gnomad211_exome\n",
            "NOTICE: Finished reading 17 column headers for '-dbtype gnomad211_exome'\n",
            "\n",
            "NOTICE: Running system command <annotate_variation.pl -filter -dbtype gnomad211_exome -buildver hg19 -outfile dados/annovar/Variantes_germinativas_variants /content/Variantes_germinativas_variants.txt annovar/humandb/ -otherinfo>\n",
            "NOTICE: Output file with variants matching filtering criteria is written to dados/annovar/Variantes_germinativas_variants.hg19_gnomad211_exome_dropped, and output file with other variants is written to dados/annovar/Variantes_germinativas_variants.hg19_gnomad211_exome_filtered\n",
            "NOTICE: Processing next batch with 14212 unique variants in 15789 input lines\n",
            "NOTICE: Database index loaded. Total number of bins is 773145 and the number of bins to be scanned is 13782\n",
            "NOTICE: Scanning filter database annovar/humandb/hg19_gnomad211_exome.txt...Done\n",
            "NOTICE: Variants with invalid input format are written to dados/annovar/Variantes_germinativas_variants.invalid_input\n",
            "-----------------------------------------------------------------\n",
            "NOTICE: Processing operation=f protocol=intervar_20180118\n",
            "NOTICE: Finished reading 29 column headers for '-dbtype intervar_20180118'\n",
            "\n",
            "NOTICE: Running system command <annotate_variation.pl -filter -dbtype intervar_20180118 -buildver hg19 -outfile dados/annovar/Variantes_germinativas_variants /content/Variantes_germinativas_variants.txt annovar/humandb/ -otherinfo>\n",
            "NOTICE: the --dbtype intervar_20180118 is assumed to be in generic ANNOVAR database format\n",
            "NOTICE: Output file with variants matching filtering criteria is written to dados/annovar/Variantes_germinativas_variants.hg19_intervar_20180118_dropped, and output file with other variants is written to dados/annovar/Variantes_germinativas_variants.hg19_intervar_20180118_filtered\n",
            "NOTICE: Processing next batch with 14212 unique variants in 15789 input lines\n",
            "NOTICE: Database index loaded. Total number of bins is 530621 and the number of bins to be scanned is 12174\n",
            "NOTICE: Scanning filter database annovar/humandb/hg19_intervar_20180118.txt...Done\n",
            "NOTICE: Variants with invalid input format are written to dados/annovar/Variantes_germinativas_variants.invalid_input\n",
            "-----------------------------------------------------------------\n",
            "NOTICE: Multianno output file is written to dados/annovar/Variantes_germinativas_variants.hg19_multianno.txt\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%%bash\n",
        "head /content/dados/annovar/Variantes_germinativas_variants.hg19_multianno.txt"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hI4wZeYNsyfK",
        "outputId": "f6f2feb3-b6cc-4c3a-ffc1-254f598c067f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Chr\tStart\tEnd\tRef\tAlt\tFunc_refGene\tGene_refGene\tGeneDetail_refGene\tExonicFunc_refGene\tAAChange_refGene\tabraom_freq\tabraom_filter\tabraom_cegh_filter\tavsnp147\tExAC_ALL\tExAC_AFR\tExAC_AMR\tExAC_EAS\tExAC_FIN\tExAC_NFE\tExAC_OTH\tExAC_SAS\tSIFT_score\tSIFT_pred\tPolyphen2_HDIV_score\tPolyphen2_HDIV_pred\tPolyphen2_HVAR_score\tPolyphen2_HVAR_pred\tLRT_score\tLRT_pred\tMutationTaster_score\tMutationTaster_pred\tMutationAssessor_score\tMutationAssessor_pred\tFATHMM_score\tFATHMM_pred\tPROVEAN_score\tPROVEAN_pred\tVEST3_score\tCADD_raw\tCADD_phred\tDANN_score\tfathmm-MKL_coding_score\tfathmm-MKL_coding_pred\tMetaSVM_score\tMetaSVM_pred\tMetaLR_score\tMetaLR_pred\tintegrated_fitCons_score\tintegrated_confidence_value\tGERP++_RS\tphyloP7way_vertebrate\tphyloP20way_mammalian\tphastCons7way_vertebrate\tphastCons20way_mammalian\tSiPhy_29way_logOdds\tCLNALLELEID\tCLNDN\tCLNDISDB\tCLNREVSTAT\tCLNSIG\tAF\tAF_popmax\tAF_male\tAF_female\tAF_raw\tAF_afr\tAF_sas\tAF_amr\tAF_eas\tAF_nfe\tAF_fin\tAF_asj\tAF_oth\tnon_topmed_AF_popmax\tnon_neuro_AF_popmax\tnon_cancer_AF_popmax\tcontrols_AF_popmax\tInterVar_automated\tPVS1\tPS1\tPS2\tPS3\tPS4\tPM1\tPM2\tPM3\tPM4\tPM5\tPM6\tPP1\tPP2\tPP3\tPP4\tPP5\tBA1\tBS1\tBS2\tBS3\tBS4\tBP1\tBP2\tBP3\tBP4\tBP5\tBP6\tBP7\n",
            "chr1\t94049574\t94049574\tC\tA\tsplicing\tBCAR3\tNM_003567:exon6:c.1033+1G>T;NM_001261410:exon4:c.760+1G>T;NM_001308251:exon2:c.61+1G>T;NM_001261408:exon8:c.1033+1G>T;NM_001261409:exon6:c.1033+1G>T\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t1\tD\t.\t.\t.\t.\t.\t.\t.\t5.305\t25.8\t0.995\t0.989\tD\t.\t.\t.\t.\t0.156\t0\t5.56\t0.871\t0.935\t0.694\t0.227\t19.535\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n",
            "chr10\t114910883\t114910883\tG\tA\tsplicing\tTCF7L2\tNM_030756:exon8:c.932+1G>A;NM_001198529:exon8:c.932+1G>A;NM_001198528:exon8:c.932+1G>A;NM_001198531:exon9:c.1001+1G>A;NM_001146286:exon8:c.932+1G>A;NM_001146284:exon8:c.920+1G>A;NM_001146274:exon9:c.1001+1G>A;NM_001367943:exon9:c.1001+1G>A;NM_001146283:exon9:c.1073+1G>A;NM_001198527:exon8:c.920+1G>A;NM_001198526:exon8:c.932+1G>A;NM_001198525:exon8:c.947+1G>A;NM_001198530:exon7:c.830+1G>A;NM_001363501:exon9:c.1001+1G>A;NM_001146285:exon8:c.932+1G>A;NM_001349871:exon5:c.452+1G>A;NM_001349870:exon5:c.572+1G>A\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t1\tD\t.\t.\t.\t.\t.\t.\t.\t5.336\t25.8\t0.995\t0.988\tD\t.\t.\t.\t.\t0.257\t0\t5.17\t0.917\t1.044\t0.970\t0.995\t18.668\t.\t.\t.\t.\t.\t0\t.\t0\t0\t3.976e-06\t0\t0\t0\t0\t0\t0\t0\t0\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n",
            "chr12\t116418553\t116418554\tA\tAC\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n",
            "chr9\t14150143\t14150143\tC\tT\tsplicing\tNFIB\tNM_001282787:exon4:c.50+1G>A;NM_001190738:exon5:c.884+1G>A;NM_005596:exon5:c.806+1G>A;NM_001369479:exon4:c.269+1G>A;NM_001369480:exon4:c.269+1G>A;NM_001369478:exon5:c.569+1G>A;NM_001369470:exon5:c.569+1G>A;NM_001369468:exon5:c.872+1G>A;NM_001369467:exon5:c.779+1G>A;NM_001369466:exon5:c.794+1G>A;NM_001369474:exon5:c.791+1G>A;NM_001369469:exon5:c.662+1G>A;NM_001369458:exon5:c.872+1G>A;NM_001369473:exon5:c.794+1G>A;NM_001369465:exon5:c.779+1G>A;NM_001369464:exon5:c.806+1G>A;NM_001369463:exon5:c.794+1G>A;NM_001369462:exon5:c.872+1G>A;NM_001369461:exon5:c.806+1G>A;NM_001190737:exon5:c.806+1G>A;NM_001369460:exon5:c.794+1G>A;NM_001369459:exon5:c.872+1G>A;NM_001369472:exon5:c.794+1G>A;NM_001369471:exon5:c.806+1G>A;NM_001369477:exon4:c.752+1G>A;NM_001369476:exon5:c.779+1G>A;NM_001369475:exon5:c.581+1G>A\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t1\tD\t.\t.\t.\t.\t.\t.\t.\t5.515\t26.3\t0.996\t0.993\tD\t.\t.\t.\t.\t0.099\t0\t5.25\t0.871\t0.935\t0.989\t0.984\t19.232\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n",
            "chr11\t66254814\t66254814\tG\tA\tsplicing\tDPP3\tNM_005700:exon5:c.573+1G>A;NM_001256670:exon4:c.483+1G>A;NM_130443:exon5:c.573+1G>A\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t1\tD\t.\t.\t.\t.\t.\t.\t.\t5.592\t26.5\t0.994\t0.997\tD\t.\t.\t.\t.\t0.295\t0\t4.89\t0.917\t1.048\t0.914\t0.958\t15.913\t425941\tnot_provided\tMedGen:CN517202\tcriteria_provided,_single_submitter\tUncertain_significance\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n",
            "chr10\t114901076\t114901076\tG\tA\tsplicing\tTCF7L2\tNM_030756:exon5:c.616+1G>A;NM_001198529:exon5:c.616+1G>A;NM_001198528:exon5:c.616+1G>A;NM_001198531:exon6:c.685+1G>A;NM_001146286:exon5:c.616+1G>A;NM_001146284:exon5:c.616+1G>A;NM_001146274:exon6:c.685+1G>A;NM_001367943:exon6:c.685+1G>A;NM_001146283:exon6:c.757+1G>A;NM_001198527:exon5:c.616+1G>A;NM_001198526:exon5:c.616+1G>A;NM_001198525:exon5:c.616+1G>A;NM_001198530:exon4:c.514+1G>A;NM_001363501:exon6:c.685+1G>A;NM_001146285:exon5:c.616+1G>A;NM_001349871:exon2:c.136+1G>A;NM_001349870:exon2:c.256+1G>A\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t1\tD\t.\t.\t.\t.\t.\t.\t.\t6.006\t27.9\t0.994\t0.993\tD\t.\t.\t.\t.\t0.116\t0\t5.45\t0.917\t1.044\t0.982\t0.990\t19.298\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n",
            "chr14\t93286182\t93286182\tG\tC\tsplicing\tGOLGA5\tNM_005113:exon8:c.1620+1G>C\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t1\tD\t.\t.\t.\t.\t.\t.\t.\t4.845\t24.8\t0.995\t0.990\tD\t.\t.\t.\t.\t0.295\t0\t4.97\t0.917\t0.998\t0.572\t0.724\t18.227\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n",
            "chr18\t44603833\t44603833\tG\tC\tsplicing\tKATNAL2\tNM_001353907:exon12:c.878+1G>C;NM_001353899:exon15:c.1289+1G>C;NM_001353905:exon15:c.878+1G>C;NM_001353902:exon14:c.1190+1G>C;NM_001353903:exon12:c.878+1G>C;NM_001353901:exon15:c.1211+1G>C;NM_001353906:exon12:c.878+1G>C;NM_001353904:exon11:c.779+1G>C;NM_001353908:exon11:c.779+1G>C;NM_001353900:exon15:c.1286+1G>C;NM_001353909:exon11:c.779+1G>C;NM_031303:exon12:c.995+1G>C;NM_001367621:exon13:c.1211+1G>C\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t1\tD\t.\t.\t-3.38\tD\t.\t.\t.\t4.575\t24.4\t0.994\t0.998\tD\t.\t.\t.\t.\t0.706\t0\t5.83\t0.917\t1.048\t0.999\t0.970\t20.121\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n",
            "chr2\t32168370\t32168370\tC\tT\tsplicing\tMEMO1\tNM_001371915:exon3:c.143+1G>A;NM_001137602:exon2:c.143+1G>A;NM_001301833:exon3:c.143+1G>A;NM_001301852:exon2:UTR5;NM_001371912:exon3:c.263+1G>A;NM_001371913:exon3:c.170+1G>A;NM_001371914:exon3:c.143+1G>A;NM_001371916:exon3:c.143+1G>A;NM_001371917:exon2:UTR5;NM_001371918:exon5:UTR5;NM_001371920:exon2:c.143+1G>A;NM_001371921:exon2:UTR5;NM_001385196:exon3:c.425+1G>A;NM_015955:exon2:c.143+1G>A\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t1\tD\t.\t.\t.\t.\t.\t.\t.\t4.976\t25.1\t0.994\t0.980\tD\t.\t.\t.\t.\t0.099\t0\t4.1\t0.871\t-0.000\t0.994\t0.888\t15.434\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\t.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Realizar a anotação da tabela de variantes fornecida com no mínimo: anotações de frequência alélica populacional, localização/ classe da variante e alguns preditores de impacto de variantes missense"
      ],
      "metadata": {
        "id": "mb92DeBCs80j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from matplotlib import pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "from matplotlib_venn import venn2"
      ],
      "metadata": {
        "id": "uHbYYYVSsybP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/dados/annovar/Variantes_germinativas_variants.hg19_multianno.txt\", sep=\"\\t\")\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "keNkYsgJsyY_",
        "outputId": "e4227cdb-f89b-4651-f591-0fec6c104f3f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Chr      Start        End Ref Alt Func_refGene Gene_refGene  \\\n",
              "0   chr1   94049574   94049574   C   A     splicing        BCAR3   \n",
              "1  chr10  114910883  114910883   G   A     splicing       TCF7L2   \n",
              "2  chr12  116418553  116418554   A  AC            .            .   \n",
              "3   chr9   14150143   14150143   C   T     splicing         NFIB   \n",
              "4  chr11   66254814   66254814   G   A     splicing         DPP3   \n",
              "\n",
              "                                  GeneDetail_refGene ExonicFunc_refGene  \\\n",
              "0  NM_003567:exon6:c.1033+1G>T;NM_001261410:exon4...                  .   \n",
              "1  NM_030756:exon8:c.932+1G>A;NM_001198529:exon8:...                  .   \n",
              "2                                                  .                  .   \n",
              "3  NM_001282787:exon4:c.50+1G>A;NM_001190738:exon...                  .   \n",
              "4  NM_005700:exon5:c.573+1G>A;NM_001256670:exon4:...                  .   \n",
              "\n",
              "  AAChange_refGene  ... BS2 BS3 BS4 BP1 BP2 BP3 BP4 BP5 BP6 BP7  \n",
              "0                .  ...   .   .   .   .   .   .   .   .   .   .  \n",
              "1                .  ...   .   .   .   .   .   .   .   .   .   .  \n",
              "2                .  ...   .   .   .   .   .   .   .   .   .   .  \n",
              "3                .  ...   .   .   .   .   .   .   .   .   .   .  \n",
              "4                .  ...   .   .   .   .   .   .   .   .   .   .  \n",
              "\n",
              "[5 rows x 107 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e606c1fe-c454-42dc-a746-32b217cc636c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Chr</th>\n",
              "      <th>Start</th>\n",
              "      <th>End</th>\n",
              "      <th>Ref</th>\n",
              "      <th>Alt</th>\n",
              "      <th>Func_refGene</th>\n",
              "      <th>Gene_refGene</th>\n",
              "      <th>GeneDetail_refGene</th>\n",
              "      <th>ExonicFunc_refGene</th>\n",
              "      <th>AAChange_refGene</th>\n",
              "      <th>...</th>\n",
              "      <th>BS2</th>\n",
              "      <th>BS3</th>\n",
              "      <th>BS4</th>\n",
              "      <th>BP1</th>\n",
              "      <th>BP2</th>\n",
              "      <th>BP3</th>\n",
              "      <th>BP4</th>\n",
              "      <th>BP5</th>\n",
              "      <th>BP6</th>\n",
              "      <th>BP7</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>chr1</td>\n",
              "      <td>94049574</td>\n",
              "      <td>94049574</td>\n",
              "      <td>C</td>\n",
              "      <td>A</td>\n",
              "      <td>splicing</td>\n",
              "      <td>BCAR3</td>\n",
              "      <td>NM_003567:exon6:c.1033+1G&gt;T;NM_001261410:exon4...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>chr10</td>\n",
              "      <td>114910883</td>\n",
              "      <td>114910883</td>\n",
              "      <td>G</td>\n",
              "      <td>A</td>\n",
              "      <td>splicing</td>\n",
              "      <td>TCF7L2</td>\n",
              "      <td>NM_030756:exon8:c.932+1G&gt;A;NM_001198529:exon8:...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>chr12</td>\n",
              "      <td>116418553</td>\n",
              "      <td>116418554</td>\n",
              "      <td>A</td>\n",
              "      <td>AC</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>chr9</td>\n",
              "      <td>14150143</td>\n",
              "      <td>14150143</td>\n",
              "      <td>C</td>\n",
              "      <td>T</td>\n",
              "      <td>splicing</td>\n",
              "      <td>NFIB</td>\n",
              "      <td>NM_001282787:exon4:c.50+1G&gt;A;NM_001190738:exon...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>chr11</td>\n",
              "      <td>66254814</td>\n",
              "      <td>66254814</td>\n",
              "      <td>G</td>\n",
              "      <td>A</td>\n",
              "      <td>splicing</td>\n",
              "      <td>DPP3</td>\n",
              "      <td>NM_005700:exon5:c.573+1G&gt;A;NM_001256670:exon4:...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 107 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e606c1fe-c454-42dc-a746-32b217cc636c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e606c1fe-c454-42dc-a746-32b217cc636c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e606c1fe-c454-42dc-a746-32b217cc636c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/dados/annovar/Variantes_germinativas_variants.hg19_multianno.txt\", sep=\"\\t\")\n",
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yrYfieVusyVO",
        "outputId": "7ddc1d20-f8ff-4f50-e095-dd80b3975ae4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Chr', 'Start', 'End', 'Ref', 'Alt', 'Func_refGene', 'Gene_refGene',\n",
              "       'GeneDetail_refGene', 'ExonicFunc_refGene', 'AAChange_refGene',\n",
              "       ...\n",
              "       'BS2', 'BS3', 'BS4', 'BP1', 'BP2', 'BP3', 'BP4', 'BP5', 'BP6', 'BP7'],\n",
              "      dtype='object', length=107)"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Adicionar variantes e fenótipos do estudo\n",
        "df_children_variants = pd.read_excel('/content/drive/Shareddrives/T4-2022/NathaliaCorrea/PipeGerm/Variantes_germinativas_tabelas.xlsx', sheet_name='Variants')\n",
        "df_children_variants.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MhK50VZzsyRu",
        "outputId": "12252a7e-053e-4fd8-cf2e-d7818ab0cdf7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['DataSet', 'Variant', 'Child_ID', 'Phenotype_ID', 'Dad_ID', 'Mom_ID',\n",
              "       'Child_Sex', 'Affected_Status'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Criando coluna 'Variant' no formato chrm:start:ref:alt\n",
        "variant_apply = df.apply(\n",
        "    lambda row: (\":\".join([row['Chr'].replace('chr', ''), str(row['Start']), row['Ref'], row['Alt']])), axis=1)\n",
        "df['Variant'] = variant_apply\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "b_IQqufzsyO1",
        "outputId": "c9a80a56-090d-41f8-c155-99e7e420fb9b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     Chr      Start        End Ref Alt Func_refGene Gene_refGene  \\\n",
              "0   chr1   94049574   94049574   C   A     splicing        BCAR3   \n",
              "1  chr10  114910883  114910883   G   A     splicing       TCF7L2   \n",
              "2  chr12  116418553  116418554   A  AC            .            .   \n",
              "3   chr9   14150143   14150143   C   T     splicing         NFIB   \n",
              "4  chr11   66254814   66254814   G   A     splicing         DPP3   \n",
              "\n",
              "                                  GeneDetail_refGene ExonicFunc_refGene  \\\n",
              "0  NM_003567:exon6:c.1033+1G>T;NM_001261410:exon4...                  .   \n",
              "1  NM_030756:exon8:c.932+1G>A;NM_001198529:exon8:...                  .   \n",
              "2                                                  .                  .   \n",
              "3  NM_001282787:exon4:c.50+1G>A;NM_001190738:exon...                  .   \n",
              "4  NM_005700:exon5:c.573+1G>A;NM_001256670:exon4:...                  .   \n",
              "\n",
              "  AAChange_refGene  ... BS3 BS4 BP1 BP2 BP3 BP4 BP5 BP6 BP7            Variant  \n",
              "0                .  ...   .   .   .   .   .   .   .   .   .     1:94049574:C:A  \n",
              "1                .  ...   .   .   .   .   .   .   .   .   .   10:114910883:G:A  \n",
              "2                .  ...   .   .   .   .   .   .   .   .   .  12:116418553:A:AC  \n",
              "3                .  ...   .   .   .   .   .   .   .   .   .     9:14150143:C:T  \n",
              "4                .  ...   .   .   .   .   .   .   .   .   .    11:66254814:G:A  \n",
              "\n",
              "[5 rows x 108 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dca66db8-7028-4c6b-977a-b3fa76314455\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Chr</th>\n",
              "      <th>Start</th>\n",
              "      <th>End</th>\n",
              "      <th>Ref</th>\n",
              "      <th>Alt</th>\n",
              "      <th>Func_refGene</th>\n",
              "      <th>Gene_refGene</th>\n",
              "      <th>GeneDetail_refGene</th>\n",
              "      <th>ExonicFunc_refGene</th>\n",
              "      <th>AAChange_refGene</th>\n",
              "      <th>...</th>\n",
              "      <th>BS3</th>\n",
              "      <th>BS4</th>\n",
              "      <th>BP1</th>\n",
              "      <th>BP2</th>\n",
              "      <th>BP3</th>\n",
              "      <th>BP4</th>\n",
              "      <th>BP5</th>\n",
              "      <th>BP6</th>\n",
              "      <th>BP7</th>\n",
              "      <th>Variant</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>chr1</td>\n",
              "      <td>94049574</td>\n",
              "      <td>94049574</td>\n",
              "      <td>C</td>\n",
              "      <td>A</td>\n",
              "      <td>splicing</td>\n",
              "      <td>BCAR3</td>\n",
              "      <td>NM_003567:exon6:c.1033+1G&gt;T;NM_001261410:exon4...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>1:94049574:C:A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>chr10</td>\n",
              "      <td>114910883</td>\n",
              "      <td>114910883</td>\n",
              "      <td>G</td>\n",
              "      <td>A</td>\n",
              "      <td>splicing</td>\n",
              "      <td>TCF7L2</td>\n",
              "      <td>NM_030756:exon8:c.932+1G&gt;A;NM_001198529:exon8:...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>10:114910883:G:A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>chr12</td>\n",
              "      <td>116418553</td>\n",
              "      <td>116418554</td>\n",
              "      <td>A</td>\n",
              "      <td>AC</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>12:116418553:A:AC</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>chr9</td>\n",
              "      <td>14150143</td>\n",
              "      <td>14150143</td>\n",
              "      <td>C</td>\n",
              "      <td>T</td>\n",
              "      <td>splicing</td>\n",
              "      <td>NFIB</td>\n",
              "      <td>NM_001282787:exon4:c.50+1G&gt;A;NM_001190738:exon...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>9:14150143:C:T</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>chr11</td>\n",
              "      <td>66254814</td>\n",
              "      <td>66254814</td>\n",
              "      <td>G</td>\n",
              "      <td>A</td>\n",
              "      <td>splicing</td>\n",
              "      <td>DPP3</td>\n",
              "      <td>NM_005700:exon5:c.573+1G&gt;A;NM_001256670:exon4:...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>11:66254814:G:A</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 108 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dca66db8-7028-4c6b-977a-b3fa76314455')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dca66db8-7028-4c6b-977a-b3fa76314455 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dca66db8-7028-4c6b-977a-b3fa76314455');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_total_variants_merged = pd.merge (df_children_variants, df, on=['Variant'], how='left')\n",
        "df_total_variants_merged.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "whjgKmPcsyLv",
        "outputId": "e38b3e1c-f79f-4c12-fd39-b1de3f8361a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       DataSet            Variant  Child_ID Phenotype_ID    Dad_ID    Mom_ID  \\\n",
              "0  ASC_v15_VCF     1:94049574:C:A  13069.s1     13069.s1  13069.fa  13069.mo   \n",
              "1  ASC_v15_VCF   10:114910883:G:A     35906     12090.p1     35900     35902   \n",
              "2  ASC_v15_VCF  12:116418553:A:AC  SSC05997     12969.p1  SSC06008  SSC06001   \n",
              "3  ASC_v15_VCF     9:14150143:C:T     36153     14385.p1     36147     36149   \n",
              "4  ASC_v15_VCF    11:66254814:G:A    AU190A       AU190A    AU190B    AU190C   \n",
              "\n",
              "  Child_Sex  Affected_Status    Chr      Start  ...  BS2 BS3 BS4 BP1 BP2 BP3  \\\n",
              "0      Male                1   chr1   94049574  ...    .   .   .   .   .   .   \n",
              "1    Female                2  chr10  114910883  ...    .   .   .   .   .   .   \n",
              "2      Male                2  chr12  116418553  ...    .   .   .   .   .   .   \n",
              "3    Female                2   chr9   14150143  ...    .   .   .   .   .   .   \n",
              "4      Male                2  chr11   66254814  ...    .   .   .   .   .   .   \n",
              "\n",
              "  BP4 BP5 BP6 BP7  \n",
              "0   .   .   .   .  \n",
              "1   .   .   .   .  \n",
              "2   .   .   .   .  \n",
              "3   .   .   .   .  \n",
              "4   .   .   .   .  \n",
              "\n",
              "[5 rows x 115 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b7b52da-6139-4616-83d5-a4c5e033ac2e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DataSet</th>\n",
              "      <th>Variant</th>\n",
              "      <th>Child_ID</th>\n",
              "      <th>Phenotype_ID</th>\n",
              "      <th>Dad_ID</th>\n",
              "      <th>Mom_ID</th>\n",
              "      <th>Child_Sex</th>\n",
              "      <th>Affected_Status</th>\n",
              "      <th>Chr</th>\n",
              "      <th>Start</th>\n",
              "      <th>...</th>\n",
              "      <th>BS2</th>\n",
              "      <th>BS3</th>\n",
              "      <th>BS4</th>\n",
              "      <th>BP1</th>\n",
              "      <th>BP2</th>\n",
              "      <th>BP3</th>\n",
              "      <th>BP4</th>\n",
              "      <th>BP5</th>\n",
              "      <th>BP6</th>\n",
              "      <th>BP7</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>1:94049574:C:A</td>\n",
              "      <td>13069.s1</td>\n",
              "      <td>13069.s1</td>\n",
              "      <td>13069.fa</td>\n",
              "      <td>13069.mo</td>\n",
              "      <td>Male</td>\n",
              "      <td>1</td>\n",
              "      <td>chr1</td>\n",
              "      <td>94049574</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>10:114910883:G:A</td>\n",
              "      <td>35906</td>\n",
              "      <td>12090.p1</td>\n",
              "      <td>35900</td>\n",
              "      <td>35902</td>\n",
              "      <td>Female</td>\n",
              "      <td>2</td>\n",
              "      <td>chr10</td>\n",
              "      <td>114910883</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>12:116418553:A:AC</td>\n",
              "      <td>SSC05997</td>\n",
              "      <td>12969.p1</td>\n",
              "      <td>SSC06008</td>\n",
              "      <td>SSC06001</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr12</td>\n",
              "      <td>116418553</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>9:14150143:C:T</td>\n",
              "      <td>36153</td>\n",
              "      <td>14385.p1</td>\n",
              "      <td>36147</td>\n",
              "      <td>36149</td>\n",
              "      <td>Female</td>\n",
              "      <td>2</td>\n",
              "      <td>chr9</td>\n",
              "      <td>14150143</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>11:66254814:G:A</td>\n",
              "      <td>AU190A</td>\n",
              "      <td>AU190A</td>\n",
              "      <td>AU190B</td>\n",
              "      <td>AU190C</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr11</td>\n",
              "      <td>66254814</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 115 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b7b52da-6139-4616-83d5-a4c5e033ac2e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5b7b52da-6139-4616-83d5-a4c5e033ac2e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5b7b52da-6139-4616-83d5-a4c5e033ac2e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_total_variants_merged.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zHeU64S_syG5",
        "outputId": "a4b4a353-9af1-4f7f-ed14-cd25fc2e0a01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['DataSet', 'Variant', 'Child_ID', 'Phenotype_ID', 'Dad_ID', 'Mom_ID',\n",
              "       'Child_Sex', 'Affected_Status', 'Chr', 'Start',\n",
              "       ...\n",
              "       'BS2', 'BS3', 'BS4', 'BP1', 'BP2', 'BP3', 'BP4', 'BP5', 'BP6', 'BP7'],\n",
              "      dtype='object', length=115)"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Resposta"
      ],
      "metadata": {
        "id": "4J430z7xKKoi"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "test = df_impacto[['Chr', 'Start', 'End', 'Ref', 'Alt', 'Func_refGene', 'MutationTaster_Function', 'ExAC_ALL']]\n",
        "exerc1 = test.sort_values(by='Chr', ascending = True)\n",
        "exerc1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "XIB6ZnzOsyEW",
        "outputId": "de908475-e76b-4c40-e865-b277c7d2fdbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       Chr      Start        End Ref Alt Func_refGene MutationTaster_Function  \\\n",
              "5751  chr1  244552291  244552291   C   T       exonic    Probably Deleterious   \n",
              "611   chr1  207112505  207112505   C   T       exonic       Probably Harmless   \n",
              "5436  chr1    1890629    1890629   C   T       exonic    Probably Deleterious   \n",
              "4641  chr1   22332024   22332024   G   A       exonic    Probably Deleterious   \n",
              "1990  chr1    2234766    2234766   C   T       exonic             Deleterious   \n",
              "...    ...        ...        ...  ..  ..          ...                     ...   \n",
              "378   chrX   70330402   70330402   G   A       exonic       Probably Harmless   \n",
              "4108  chrX   53603952   53603952   T   C       exonic    Probably Deleterious   \n",
              "5607  chrX  153608620  153608620   A   G       exonic    Probably Deleterious   \n",
              "373   chrX  110928268  110928268   A   G       exonic       Probably Harmless   \n",
              "2357  chrX  153296852  153296852   C   A       exonic    Probably Deleterious   \n",
              "\n",
              "       ExAC_ALL  \n",
              "5751  1.648e-05  \n",
              "611   8.293e-06  \n",
              "5436          .  \n",
              "4641  4.122e-05  \n",
              "1990          .  \n",
              "...         ...  \n",
              "378           .  \n",
              "4108          0  \n",
              "5607          .  \n",
              "373           .  \n",
              "2357          .  \n",
              "\n",
              "[6918 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cf72f228-351b-4477-80d7-c63b20736bc7\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Chr</th>\n",
              "      <th>Start</th>\n",
              "      <th>End</th>\n",
              "      <th>Ref</th>\n",
              "      <th>Alt</th>\n",
              "      <th>Func_refGene</th>\n",
              "      <th>MutationTaster_Function</th>\n",
              "      <th>ExAC_ALL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5751</th>\n",
              "      <td>chr1</td>\n",
              "      <td>244552291</td>\n",
              "      <td>244552291</td>\n",
              "      <td>C</td>\n",
              "      <td>T</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Deleterious</td>\n",
              "      <td>1.648e-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>611</th>\n",
              "      <td>chr1</td>\n",
              "      <td>207112505</td>\n",
              "      <td>207112505</td>\n",
              "      <td>C</td>\n",
              "      <td>T</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Harmless</td>\n",
              "      <td>8.293e-06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5436</th>\n",
              "      <td>chr1</td>\n",
              "      <td>1890629</td>\n",
              "      <td>1890629</td>\n",
              "      <td>C</td>\n",
              "      <td>T</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Deleterious</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4641</th>\n",
              "      <td>chr1</td>\n",
              "      <td>22332024</td>\n",
              "      <td>22332024</td>\n",
              "      <td>G</td>\n",
              "      <td>A</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Deleterious</td>\n",
              "      <td>4.122e-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1990</th>\n",
              "      <td>chr1</td>\n",
              "      <td>2234766</td>\n",
              "      <td>2234766</td>\n",
              "      <td>C</td>\n",
              "      <td>T</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Deleterious</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>378</th>\n",
              "      <td>chrX</td>\n",
              "      <td>70330402</td>\n",
              "      <td>70330402</td>\n",
              "      <td>G</td>\n",
              "      <td>A</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Harmless</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4108</th>\n",
              "      <td>chrX</td>\n",
              "      <td>53603952</td>\n",
              "      <td>53603952</td>\n",
              "      <td>T</td>\n",
              "      <td>C</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Deleterious</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5607</th>\n",
              "      <td>chrX</td>\n",
              "      <td>153608620</td>\n",
              "      <td>153608620</td>\n",
              "      <td>A</td>\n",
              "      <td>G</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Deleterious</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>373</th>\n",
              "      <td>chrX</td>\n",
              "      <td>110928268</td>\n",
              "      <td>110928268</td>\n",
              "      <td>A</td>\n",
              "      <td>G</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Harmless</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2357</th>\n",
              "      <td>chrX</td>\n",
              "      <td>153296852</td>\n",
              "      <td>153296852</td>\n",
              "      <td>C</td>\n",
              "      <td>A</td>\n",
              "      <td>exonic</td>\n",
              "      <td>Probably Deleterious</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>6918 rows × 8 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf72f228-351b-4477-80d7-c63b20736bc7')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cf72f228-351b-4477-80d7-c63b20736bc7 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cf72f228-351b-4477-80d7-c63b20736bc7');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Apontar em uma tabela o número de variantes encontradas nos indivíduos autistas e nos seus irmãos, reportando este dado para diferentes classes funcionais e por score de predição de impacto"
      ],
      "metadata": {
        "id": "VOU1v3S0tMt_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_autistic_variants = df_total_variants_merged[df_total_variants_merged[\"Affected_Status\"] == 2]\n",
        "df_not_autistic_variants = df_total_variants_merged[df_total_variants_merged[\"Affected_Status\"] == 1]\n",
        "df_autistic_variants.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "FVZneHi1u9hZ",
        "outputId": "3a2e5dcd-8e6c-40ab-eeeb-1e4579eac24d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       DataSet            Variant  Child_ID Phenotype_ID    Dad_ID    Mom_ID  \\\n",
              "0  ASC_v15_VCF   10:114910883:G:A     35906     12090.p1     35900     35902   \n",
              "1  ASC_v15_VCF  12:116418553:A:AC  SSC05997     12969.p1  SSC06008  SSC06001   \n",
              "2  ASC_v15_VCF     9:14150143:C:T     36153     14385.p1     36147     36149   \n",
              "3  ASC_v15_VCF    11:66254814:G:A    AU190A       AU190A    AU190B    AU190C   \n",
              "4  ASC_v15_VCF   10:114901076:G:A  13069.p1     13069.p1  13069.fa  13069.mo   \n",
              "\n",
              "  Child_Sex  Affected_Status    Chr      Start  ...  BS2 BS3 BS4 BP1 BP2 BP3  \\\n",
              "0    Female                2  chr10  114910883  ...    .   .   .   .   .   .   \n",
              "1      Male                2  chr12  116418553  ...    .   .   .   .   .   .   \n",
              "2    Female                2   chr9   14150143  ...    .   .   .   .   .   .   \n",
              "3      Male                2  chr11   66254814  ...    .   .   .   .   .   .   \n",
              "4      Male                2  chr10  114901076  ...    .   .   .   .   .   .   \n",
              "\n",
              "  BP4 BP5 BP6 BP7  \n",
              "0   .   .   .   .  \n",
              "1   .   .   .   .  \n",
              "2   .   .   .   .  \n",
              "3   .   .   .   .  \n",
              "4   .   .   .   .  \n",
              "\n",
              "[5 rows x 115 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-828cc248-23d3-4ea2-a614-af5771897836\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DataSet</th>\n",
              "      <th>Variant</th>\n",
              "      <th>Child_ID</th>\n",
              "      <th>Phenotype_ID</th>\n",
              "      <th>Dad_ID</th>\n",
              "      <th>Mom_ID</th>\n",
              "      <th>Child_Sex</th>\n",
              "      <th>Affected_Status</th>\n",
              "      <th>Chr</th>\n",
              "      <th>Start</th>\n",
              "      <th>...</th>\n",
              "      <th>BS2</th>\n",
              "      <th>BS3</th>\n",
              "      <th>BS4</th>\n",
              "      <th>BP1</th>\n",
              "      <th>BP2</th>\n",
              "      <th>BP3</th>\n",
              "      <th>BP4</th>\n",
              "      <th>BP5</th>\n",
              "      <th>BP6</th>\n",
              "      <th>BP7</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>10:114910883:G:A</td>\n",
              "      <td>35906</td>\n",
              "      <td>12090.p1</td>\n",
              "      <td>35900</td>\n",
              "      <td>35902</td>\n",
              "      <td>Female</td>\n",
              "      <td>2</td>\n",
              "      <td>chr10</td>\n",
              "      <td>114910883</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>12:116418553:A:AC</td>\n",
              "      <td>SSC05997</td>\n",
              "      <td>12969.p1</td>\n",
              "      <td>SSC06008</td>\n",
              "      <td>SSC06001</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr12</td>\n",
              "      <td>116418553</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>9:14150143:C:T</td>\n",
              "      <td>36153</td>\n",
              "      <td>14385.p1</td>\n",
              "      <td>36147</td>\n",
              "      <td>36149</td>\n",
              "      <td>Female</td>\n",
              "      <td>2</td>\n",
              "      <td>chr9</td>\n",
              "      <td>14150143</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>11:66254814:G:A</td>\n",
              "      <td>AU190A</td>\n",
              "      <td>AU190A</td>\n",
              "      <td>AU190B</td>\n",
              "      <td>AU190C</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr11</td>\n",
              "      <td>66254814</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>10:114901076:G:A</td>\n",
              "      <td>13069.p1</td>\n",
              "      <td>13069.p1</td>\n",
              "      <td>13069.fa</td>\n",
              "      <td>13069.mo</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr10</td>\n",
              "      <td>114901076</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 115 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-828cc248-23d3-4ea2-a614-af5771897836')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-828cc248-23d3-4ea2-a614-af5771897836 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-828cc248-23d3-4ea2-a614-af5771897836');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 104
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Retirar as variantes duplicadas dos DataFrames separadamente para não eliminar pacientes acidentalmente.\n",
        "df_autistic_variants = df_autistic_variants.drop_duplicates('Variant', keep='last')\n",
        "df_not_autistic_variants = df_not_autistic_variants.drop_duplicates('Variant', keep='last')\n",
        "df_autistic_variants['Variant'].describe(), df_not_autistic_variants['Variant'].describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pdGHBsDn62ku",
        "outputId": "dba1ef78-69d2-42ab-a52b-2739d4ee915f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(count                12112\n",
              " unique               12112\n",
              " top       10:114910883:G:A\n",
              " freq                     1\n",
              " Name: Variant, dtype: object, count               3588\n",
              " unique              3588\n",
              " top       1:94049574:C:A\n",
              " freq                   1\n",
              " Name: Variant, dtype: object)"
            ]
          },
          "metadata": {},
          "execution_count": 105
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Unir novamente os Dataframes, agora apenas com variantes únicas.\n",
        "df_total_variants_merged = pd.concat([df_autistic_variants, df_not_autistic_variants], ignore_index = True)"
      ],
      "metadata": {
        "id": "y2QRYAQ18LsL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Todas as variantes exonicas.\n",
        "df_exonic_variants = df_total_variants_merged[df_total_variants_merged['Func_refGene'] == \"exonic\"]\n",
        "\n",
        "# Todas as variantes splicing.\n",
        "df_splicing_variants = df_total_variants_merged[df_total_variants_merged['Func_refGene'] == 'splicing']\n",
        "\n",
        "# Todas as variantes exonic;splicing.\n",
        "df_exonicsplicing_variants = df_total_variants_merged[df_total_variants_merged['Func_refGene'] == 'exonic;splicing']\n",
        "\n",
        "df_exonic_variants[\"Func_refGene\"].value_counts(), \\\n",
        "df_splicing_variants[\"Func_refGene\"].value_counts(), \\\n",
        "df_exonicsplicing_variants[\"Func_refGene\"].value_counts()"
      ],
      "metadata": {
        "id": "PqShuTBxntY7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4ce8c79d-1684-44c2-f695-f8890db2e51d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(exonic    9406\n",
              " Name: Func_refGene, dtype: int64, splicing    162\n",
              " Name: Func_refGene, dtype: int64, exonic;splicing    5\n",
              " Name: Func_refGene, dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 107
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Retirar as variantes exonicas que não causam alteração de função e as que não são conhecidas.\n",
        "df_exonic_variants = df_exonic_variants[df_exonic_variants['ExonicFunc_refGene'] != 'synonymous SNV']\n",
        "df_exonic_variants = df_exonic_variants[df_exonic_variants['ExonicFunc_refGene'] != 'unknown']\n",
        "df_exonic_variants['ExonicFunc_refGene'].value_counts()"
      ],
      "metadata": {
        "id": "K_4mDo4tpv3A",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b66d5180-3a0d-437f-b8ae-e189048561b2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "nonsynonymous SNV    6378\n",
              "stopgain              458\n",
              "startloss              19\n",
              "stoploss                4\n",
              "Name: ExonicFunc_refGene, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Concatenar todas as variantes exonic, splicing e exonic;splicing em uma só tabela.\n",
        "df_damaging_variants = pd.concat([df_exonic_variants, df_splicing_variants, df_exonicsplicing_variants], ignore_index=True)\n",
        "df_damaging_variants['Func_refGene'].value_counts()"
      ],
      "metadata": {
        "id": "vLcKdf9N81rI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5def1952-2b79-4d50-b1fd-d331ddca558b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "exonic             6859\n",
              "splicing            162\n",
              "exonic;splicing       5\n",
              "Name: Func_refGene, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# MutationPred para predição de impacto.\n",
        "df_damaging_variants['MutationTaster_pred'].value_counts()"
      ],
      "metadata": {
        "id": "HZpV5sKoFh9n",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6be2eab5-a5bf-4c04-e903-5a4dcf6d1ee4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "D    4570\n",
              "N    1979\n",
              "A     364\n",
              ".     108\n",
              "P       5\n",
              "Name: MutationTaster_pred, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 110
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Criação de uma nova coluna com dados visualmente mais agradáveis para predição de impacto.\n",
        "df_damaging_variants['MutationTaster_Function'] = df_damaging_variants['MutationTaster_pred'].replace({'A': 'Deleterious', 'D': 'Probably Deleterious', 'N': 'Probably Harmless', 'P': 'Harmless'})"
      ],
      "metadata": {
        "id": "Dsv7OuZOGtBk"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Todas as variantes com score de predição de impacto causadoras ou provavelmente causadoras de doença.\n",
        "df_damaging_variants_del = df_damaging_variants[df_damaging_variants['MutationTaster_Function'] == 'Deleterious']\n",
        "df_damaging_variants_probablydel = df_damaging_variants[df_damaging_variants['MutationTaster_Function'] == 'Probably Deleterious']\n",
        "df_damaging_variants_deleterious = pd.concat([df_damaging_variants_del, df_damaging_variants_probablydel], ignore_index=True)\n",
        "\n",
        "df_damaging_variants_deleterious['MutationTaster_Function'].value_counts()"
      ],
      "metadata": {
        "id": "41kv8x5XJKWd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2de59cc8-32ad-4a67-deb1-26cd716374ce"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Probably Deleterious    4570\n",
              "Deleterious              364\n",
              "Name: MutationTaster_Function, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Todas as variantes com score de predição de impacto inofensivas ou provavelmente inofensivas.\n",
        "df_damaging_variants_harm = df_damaging_variants[df_damaging_variants['MutationTaster_Function'] == 'Harmless']\n",
        "df_damaging_variants_probablyharm = df_damaging_variants[df_damaging_variants['MutationTaster_Function'] == 'Probably Harmless']\n",
        "df_damaging_variants_harmless = pd.concat([df_damaging_variants_harm, df_damaging_variants_probablyharm], ignore_index=True)\n",
        "\n",
        "df_damaging_variants_harmless['MutationTaster_Function'].value_counts()"
      ],
      "metadata": {
        "id": "0fCRGHTkOy0F",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "99f6d465-7554-48d4-dbee-67d687584b49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Probably Harmless    1979\n",
              "Harmless                5\n",
              "Name: MutationTaster_Function, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# União dos DataFrames de predição de impacto.\n",
        "df_impacto = pd.concat([df_damaging_variants_harmless, df_damaging_variants_deleterious], ignore_index=True)\n",
        "df_impacto.head()"
      ],
      "metadata": {
        "id": "xU7pVqrpYa2g",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "outputId": "c5f59c6f-632d-4447-fd5f-9e28d78c8a20"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 DataSet          Variant         Child_ID     Phenotype_ID  \\\n",
              "0            ASC_v15_VCF   2:20818764:C:G             5014         12810.p1   \n",
              "1            ASC_v15_VCF  11:57157405:A:C         SSC06069         12723.p1   \n",
              "2  De_Rubeis_Nature_2014   6:32609173:C:G       1424JS0003       1424JS0003   \n",
              "3      SSC_Iossifov_2014   8:17731961:G:T            68510         11106.s1   \n",
              "4            ASC_v15_VCF  14:24803698:A:C  EGAN00001100975  EGAN00001100975   \n",
              "\n",
              "            Dad_ID           Mom_ID Child_Sex  Affected_Status    Chr  \\\n",
              "0             4950             4982      Male                2   chr2   \n",
              "1         SSC06073         SSC06273      Male                2  chr11   \n",
              "2       1360JS0020       1360JS0021      Male                2   chr6   \n",
              "3         11106.fa         11106.mo      Male                1   chr8   \n",
              "4  EGAN00001101143  EGAN00001101142    Female                2  chr14   \n",
              "\n",
              "      Start  ...  BS3 BS4 BP1 BP2 BP3 BP4 BP5 BP6 BP7 MutationTaster_Function  \n",
              "0  20818764  ...    0   0   0   0   0   1   0   0   0                Harmless  \n",
              "1  57157405  ...    0   0   0   0   0   0   0   0   0                Harmless  \n",
              "2  32609173  ...    0   0   0   0   0   1   0   0   0                Harmless  \n",
              "3  17731961  ...    0   0   0   0   0   0   0   0   0                Harmless  \n",
              "4  24803698  ...    .   .   .   .   .   .   .   .   .                Harmless  \n",
              "\n",
              "[5 rows x 116 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-670ae00f-3dbb-424c-92c7-9cd2df6684f0\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DataSet</th>\n",
              "      <th>Variant</th>\n",
              "      <th>Child_ID</th>\n",
              "      <th>Phenotype_ID</th>\n",
              "      <th>Dad_ID</th>\n",
              "      <th>Mom_ID</th>\n",
              "      <th>Child_Sex</th>\n",
              "      <th>Affected_Status</th>\n",
              "      <th>Chr</th>\n",
              "      <th>Start</th>\n",
              "      <th>...</th>\n",
              "      <th>BS3</th>\n",
              "      <th>BS4</th>\n",
              "      <th>BP1</th>\n",
              "      <th>BP2</th>\n",
              "      <th>BP3</th>\n",
              "      <th>BP4</th>\n",
              "      <th>BP5</th>\n",
              "      <th>BP6</th>\n",
              "      <th>BP7</th>\n",
              "      <th>MutationTaster_Function</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>2:20818764:C:G</td>\n",
              "      <td>5014</td>\n",
              "      <td>12810.p1</td>\n",
              "      <td>4950</td>\n",
              "      <td>4982</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr2</td>\n",
              "      <td>20818764</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>11:57157405:A:C</td>\n",
              "      <td>SSC06069</td>\n",
              "      <td>12723.p1</td>\n",
              "      <td>SSC06073</td>\n",
              "      <td>SSC06273</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr11</td>\n",
              "      <td>57157405</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>De_Rubeis_Nature_2014</td>\n",
              "      <td>6:32609173:C:G</td>\n",
              "      <td>1424JS0003</td>\n",
              "      <td>1424JS0003</td>\n",
              "      <td>1360JS0020</td>\n",
              "      <td>1360JS0021</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr6</td>\n",
              "      <td>32609173</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>SSC_Iossifov_2014</td>\n",
              "      <td>8:17731961:G:T</td>\n",
              "      <td>68510</td>\n",
              "      <td>11106.s1</td>\n",
              "      <td>11106.fa</td>\n",
              "      <td>11106.mo</td>\n",
              "      <td>Male</td>\n",
              "      <td>1</td>\n",
              "      <td>chr8</td>\n",
              "      <td>17731961</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>14:24803698:A:C</td>\n",
              "      <td>EGAN00001100975</td>\n",
              "      <td>EGAN00001100975</td>\n",
              "      <td>EGAN00001101143</td>\n",
              "      <td>EGAN00001101142</td>\n",
              "      <td>Female</td>\n",
              "      <td>2</td>\n",
              "      <td>chr14</td>\n",
              "      <td>24803698</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 116 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-670ae00f-3dbb-424c-92c7-9cd2df6684f0')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-670ae00f-3dbb-424c-92c7-9cd2df6684f0 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-670ae00f-3dbb-424c-92c7-9cd2df6684f0');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 114
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Resposta"
      ],
      "metadata": {
        "id": "US-jYAFAKRiS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Tabela comparativa dos dados e o total de variantes únicas dos autistas e não-autistas.\n",
        "variantes = df_impacto.set_index('Func_refGene').groupby(['Func_refGene', 'MutationTaster_Function'])['Affected_Status'].value_counts().reset_index(name=\"count\")\n",
        "variantes_pivo = variantes.pivot_table(values = 'count', index = ['Func_refGene', 'MutationTaster_Function'],\n",
        "                                       columns = 'Affected_Status',\n",
        "                                       aggfunc = 'sum',\n",
        "                                                  margins = True, margins_name = 'Total de Variantes')\n",
        "variantes_clean = variantes_pivo.replace(to_replace=np.nan, value='0')\n",
        "variantes_clean.pop('Total de Variantes')\n",
        "variantes_clean"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 327
        },
        "id": "3bwqOJr9FaJD",
        "outputId": "d7e540c5-9240-43f5-df70-46d64931cd35"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Affected_Status                                  1       2\n",
              "Func_refGene       MutationTaster_Function                \n",
              "exonic             Deleterious                55.0   309.0\n",
              "                   Harmless                    1.0     3.0\n",
              "                   Probably Deleterious     1022.0  3397.0\n",
              "                   Probably Harmless         518.0  1455.0\n",
              "exonic;splicing    Probably Deleterious          0     3.0\n",
              "                   Probably Harmless             0     2.0\n",
              "splicing           Harmless                      0     1.0\n",
              "                   Probably Deleterious       23.0   125.0\n",
              "                   Probably Harmless           2.0     2.0\n",
              "Total de Variantes                          1621.0  5297.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-08a715d7-660a-4c04-8a92-18a105aba73b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Affected_Status</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Func_refGene</th>\n",
              "      <th>MutationTaster_Function</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th rowspan=\"4\" valign=\"top\">exonic</th>\n",
              "      <th>Deleterious</th>\n",
              "      <td>55.0</td>\n",
              "      <td>309.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Harmless</th>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Probably Deleterious</th>\n",
              "      <td>1022.0</td>\n",
              "      <td>3397.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Probably Harmless</th>\n",
              "      <td>518.0</td>\n",
              "      <td>1455.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"2\" valign=\"top\">exonic;splicing</th>\n",
              "      <th>Probably Deleterious</th>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Probably Harmless</th>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th rowspan=\"3\" valign=\"top\">splicing</th>\n",
              "      <th>Harmless</th>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Probably Deleterious</th>\n",
              "      <td>23.0</td>\n",
              "      <td>125.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Probably Harmless</th>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total de Variantes</th>\n",
              "      <th></th>\n",
              "      <td>1621.0</td>\n",
              "      <td>5297.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08a715d7-660a-4c04-8a92-18a105aba73b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-08a715d7-660a-4c04-8a92-18a105aba73b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-08a715d7-660a-4c04-8a92-18a105aba73b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Calcular se há diferença na proporção de indivíduos autistas com variantes raras de novo comparativamente a seus irmãos. Lembre-se que é possível analisar diferentes classes de variantes."
      ],
      "metadata": {
        "id": "Ie2FtwgIGWbF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_impacto_autistic = df_impacto[df_impacto[\"Affected_Status\"] == 2]\n",
        "df_impacto_not_autistic = df_impacto[df_impacto[\"Affected_Status\"] == 1]\n",
        "df_impacto_autistic.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "GcoCNqhkGVMp",
        "outputId": "ad868af9-c409-4eb7-c8d9-02a7cc728c6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                 DataSet          Variant         Child_ID     Phenotype_ID  \\\n",
              "0            ASC_v15_VCF   2:20818764:C:G             5014         12810.p1   \n",
              "1            ASC_v15_VCF  11:57157405:A:C         SSC06069         12723.p1   \n",
              "2  De_Rubeis_Nature_2014   6:32609173:C:G       1424JS0003       1424JS0003   \n",
              "4            ASC_v15_VCF  14:24803698:A:C  EGAN00001100975  EGAN00001100975   \n",
              "5            ASC_v15_VCF  16:28510980:G:A           AU206A           AU206A   \n",
              "\n",
              "            Dad_ID           Mom_ID Child_Sex  Affected_Status    Chr  \\\n",
              "0             4950             4982      Male                2   chr2   \n",
              "1         SSC06073         SSC06273      Male                2  chr11   \n",
              "2       1360JS0020       1360JS0021      Male                2   chr6   \n",
              "4  EGAN00001101143  EGAN00001101142    Female                2  chr14   \n",
              "5           AU206B           AU206C      Male                2  chr16   \n",
              "\n",
              "      Start  ...  BS3 BS4 BP1 BP2 BP3 BP4 BP5 BP6 BP7 MutationTaster_Function  \n",
              "0  20818764  ...    0   0   0   0   0   1   0   0   0                Harmless  \n",
              "1  57157405  ...    0   0   0   0   0   0   0   0   0                Harmless  \n",
              "2  32609173  ...    0   0   0   0   0   1   0   0   0                Harmless  \n",
              "4  24803698  ...    .   .   .   .   .   .   .   .   .                Harmless  \n",
              "5  28510980  ...    0   0   0   0   0   0   0   0   0       Probably Harmless  \n",
              "\n",
              "[5 rows x 116 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-14ef74d7-aff5-4fc8-839f-951c7384af49\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>DataSet</th>\n",
              "      <th>Variant</th>\n",
              "      <th>Child_ID</th>\n",
              "      <th>Phenotype_ID</th>\n",
              "      <th>Dad_ID</th>\n",
              "      <th>Mom_ID</th>\n",
              "      <th>Child_Sex</th>\n",
              "      <th>Affected_Status</th>\n",
              "      <th>Chr</th>\n",
              "      <th>Start</th>\n",
              "      <th>...</th>\n",
              "      <th>BS3</th>\n",
              "      <th>BS4</th>\n",
              "      <th>BP1</th>\n",
              "      <th>BP2</th>\n",
              "      <th>BP3</th>\n",
              "      <th>BP4</th>\n",
              "      <th>BP5</th>\n",
              "      <th>BP6</th>\n",
              "      <th>BP7</th>\n",
              "      <th>MutationTaster_Function</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>2:20818764:C:G</td>\n",
              "      <td>5014</td>\n",
              "      <td>12810.p1</td>\n",
              "      <td>4950</td>\n",
              "      <td>4982</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr2</td>\n",
              "      <td>20818764</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>11:57157405:A:C</td>\n",
              "      <td>SSC06069</td>\n",
              "      <td>12723.p1</td>\n",
              "      <td>SSC06073</td>\n",
              "      <td>SSC06273</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr11</td>\n",
              "      <td>57157405</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>De_Rubeis_Nature_2014</td>\n",
              "      <td>6:32609173:C:G</td>\n",
              "      <td>1424JS0003</td>\n",
              "      <td>1424JS0003</td>\n",
              "      <td>1360JS0020</td>\n",
              "      <td>1360JS0021</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr6</td>\n",
              "      <td>32609173</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>14:24803698:A:C</td>\n",
              "      <td>EGAN00001100975</td>\n",
              "      <td>EGAN00001100975</td>\n",
              "      <td>EGAN00001101143</td>\n",
              "      <td>EGAN00001101142</td>\n",
              "      <td>Female</td>\n",
              "      <td>2</td>\n",
              "      <td>chr14</td>\n",
              "      <td>24803698</td>\n",
              "      <td>...</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>.</td>\n",
              "      <td>Harmless</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>ASC_v15_VCF</td>\n",
              "      <td>16:28510980:G:A</td>\n",
              "      <td>AU206A</td>\n",
              "      <td>AU206A</td>\n",
              "      <td>AU206B</td>\n",
              "      <td>AU206C</td>\n",
              "      <td>Male</td>\n",
              "      <td>2</td>\n",
              "      <td>chr16</td>\n",
              "      <td>28510980</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>Probably Harmless</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 116 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-14ef74d7-aff5-4fc8-839f-951c7384af49')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-14ef74d7-aff5-4fc8-839f-951c7384af49 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-14ef74d7-aff5-4fc8-839f-951c7384af49');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Relação entre autistas com variante exônica e total de autistas.\n",
        "x = 6430\n",
        "x1 = df_impacto_autistic[df_impacto_autistic['Func_refGene'] == 'exonic']\n",
        "x2 = df_impacto_autistic[df_impacto_autistic['Func_refGene'] == 'exonic;splicing']\n",
        "x3 = df_impacto_autistic[df_impacto_autistic['Func_refGene'] == 'splicing']\n",
        "\n",
        "\n",
        "#Relação entre não-autistas com variantes exônicas e total de autistas.\n",
        "y = 2179\n",
        "y1 = df_impacto_not_autistic[df_impacto_not_autistic['Func_refGene'] == 'exonic']\n",
        "y2 = df_impacto_not_autistic[df_impacto_not_autistic['Func_refGene'] == 'exonic;splicing']\n",
        "y3 = df_impacto_not_autistic[df_impacto_not_autistic['Func_refGene'] == 'splicing']\n",
        "\n",
        "\n",
        "print([x1['Chr'].count(), y1['Chr'].count()], [x2['Chr'].count(), y2['Chr'].count()], [x3['Chr'].count(), y3['Chr'].count()])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A4-0SFhgGVIQ",
        "outputId": "d73765ab-e3d1-425f-e69e-dff3190da331"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5164, 1596] [5, 0] [128, 25]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fisher_exonic = [[x1['Chr'].count(), x], [y1['Chr'].count(), y]]\n",
        "fisher_exonicsplicing = [[x2['Chr'].count(), x], [y2['Chr'].count(), y]]\n",
        "fisher_splicing = [[x3['Chr'].count(), x], [y3['Chr'].count(), y]]\n",
        "print(fisher_exonic,'\\n', fisher_exonicsplicing, '\\n', fisher_splicing)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uqSXD6-lGVE_",
        "outputId": "d9558c69-0c94-45c1-8d92-6bf2fa8b40f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[5164, 6430], [1596, 2179]] \n",
            " [[5, 6430], [0, 2179]] \n",
            " [[128, 6430], [25, 2179]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.stats as stats"
      ],
      "metadata": {
        "id": "rCrzsqhoGVBU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Resposta"
      ],
      "metadata": {
        "id": "dKNy93chKXAp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from scipy.stats import fisher_exact\n",
        "print('\\n', 'Exonic = ', stats.fisher_exact((fisher_exonic))[1],\n",
        "      '\\n', 'Exc/Spl = ', stats.fisher_exact((fisher_exonicsplicing))[1],\n",
        "      '\\n', 'Splicing = ', stats.fisher_exact((fisher_splicing))[1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4rLJenO9Goax",
        "outputId": "aaa2995f-99dc-4592-e731-6f369f1b73fd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            " Exonic =  0.015679070947424337 \n",
            " Exc/Spl =  0.33916771077977764 \n",
            " Splicing =  0.0108854110745496\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Aplicado o **Teste de Fisher**, o mesmo avalia se a hipótese nula será aceita ou rejeitada (p valor > 0,05 e p valor <= 0,05, respectivamente).\n",
        "\n",
        "No caso, a proporção de variantes *de novo* exonic, exc/spl e splicing comparada as duas populações não apresenta diferença significativa.\n",
        "\n",
        "As variantes *de novo* exc/spl foram encontradas apenas nos individuos autistas. Sua ausência nos não-autistas deste estudo não nos permite avaliar se as diferenças seriam significativas.\n",
        "\n",
        "De acordo com os resultados, rejeitamos a hipótese nula das variantes* de novo* exonic e splicing. Encontramos uma proporção significantemente distinta em cada um dos cenários.\n",
        "\n",
        "Já as variantes *de novo* exc/spl, por possuir um p-valor > 0,05 podemos aceitar a hipótese nula entre as populações de autistas e não-autistas. Não há diferença significativa.\n",
        "\n",
        "Em porcentagem, os casos de variantes *de novo* exonic e splicing possuem aproximadamente 98,5% e 99,0%, respectivamente. Sendo então um resultado confiável, com uma chance quase nula de terem sido geradas ao acaso. Já as variantes *de novo* exc/spl provavelmente foram geradas ao acaso, com uma porcentagem de aproximadamente 33,0%\n",
        "\n"
      ],
      "metadata": {
        "id": "snDxbjqAKb2T"
      }
    }
  ]
}
